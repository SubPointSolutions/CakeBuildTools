{"IsMethod":false,"IsClass":true,"Tags":[],"Scope":null,"Title":"","Description":"","MethodBodyWithFunction":"    \r\n    public class ProvisionServices : ProvisionTestBase\r\n    {\r\n        #region methods\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void Deploy_SiteModel_CSOM()\r\n        {\r\n            // setup url\r\n            var siteUrl = \"\";\r\n\r\n            // create you model\r\n            var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n            {\r\n\r\n            });\r\n\r\n            // setup client context\r\n            using (var clientContext = new ClientContext(siteUrl))\r\n            {\r\n                // deploy site model with SharePoint Foundation CSOM API\r\n                var foundationProvisionService = new CSOMProvisionService();\r\n                foundationProvisionService.DeploySiteModel(clientContext, siteModel);\r\n\r\n                // deploy site model with SharePoint Standard CSOM API\r\n                var standardProvisionService = new StandardCSOMProvisionService();\r\n                standardProvisionService.DeploySiteModel(clientContext, siteModel);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void Deploy_WebModel_CSOM()\r\n        {\r\n            // setup url\r\n            var webUrl = \"\";\r\n\r\n            // create you model\r\n            var webModel = SPMeta2Model.NewWebModel(web =>\r\n            {\r\n\r\n            });\r\n\r\n            // setup client context\r\n            using (var clientContext = new ClientContext(webUrl))\r\n            {\r\n                // deploy web model with SharePoint Foundation CSOM API\r\n                var foundationProvisionService = new CSOMProvisionService();\r\n                foundationProvisionService.DeployWebModel(clientContext, webModel);\r\n\r\n                // deploy web model with SharePoint Standard CSOM API\r\n                var standardProvisionService = new StandardCSOMProvisionService();\r\n                standardProvisionService.DeployWebModel(clientContext, webModel);\r\n            }\r\n        }\r\n\r\n        #region ssom\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void Deploy_FarmModel_SSOM()\r\n        {\r\n            // create you model\r\n            var farmModel = SPMeta2Model.NewFarmModel(farm =>\r\n            {\r\n\r\n            });\r\n\r\n            var spFarm = SPFarm.Local;\r\n\r\n            // deploy site model with SharePoint Foundation SSOM API\r\n            var foundationProvisionService = new SSOMProvisionService();\r\n            foundationProvisionService.DeployFarmModel(spFarm, farmModel);\r\n\r\n            // deploy site model with SharePoint Standard SSOM API\r\n            var standardProvisionService = new StandardSSOMProvisionService();\r\n            standardProvisionService.DeployFarmModel(spFarm, farmModel);\r\n        }\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void Deploy_WebApplicationModel_SSOM()\r\n        {\r\n            // setup url\r\n            var webAppUrl = \"\";\r\n\r\n            // create you model\r\n            var webAppModel = SPMeta2Model.NewWebApplicationModel(webApp =>\r\n            {\r\n\r\n            });\r\n\r\n            var spWebApp = SPWebApplication.Lookup(new Uri(webAppUrl));\r\n\r\n            // deploy site model with SharePoint Foundation SSOM API\r\n            var foundationProvisionService = new SSOMProvisionService();\r\n            foundationProvisionService.DeployWebApplicationModel(spWebApp, webAppModel);\r\n\r\n            // deploy site model with SharePoint Standard SSOM API\r\n            var standardProvisionService = new StandardSSOMProvisionService();\r\n            standardProvisionService.DeployWebApplicationModel(spWebApp, webAppModel);\r\n        }\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void Deploy_SiteModel_SSOM()\r\n        {\r\n            // setup url\r\n            var siteUrl = \"\";\r\n\r\n            // create you model\r\n            var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n            {\r\n\r\n            });\r\n\r\n            using (var spSite = new SPSite(siteUrl))\r\n            {\r\n                // deploy site model with SharePoint Foundation SSOM API\r\n                var foundationProvisionService = new SSOMProvisionService();\r\n                foundationProvisionService.DeploySiteModel(spSite, siteModel);\r\n\r\n                // deploy site model with SharePoint Standard SSOM API\r\n                var standardProvisionService = new StandardSSOMProvisionService();\r\n                standardProvisionService.DeploySiteModel(spSite, siteModel);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void Deploy_WebModel_SSOM()\r\n        {\r\n            // setup url\r\n            var webUrl = \"\";\r\n\r\n            // create you model\r\n            var webModel = SPMeta2Model.NewWebModel(web =>\r\n            {\r\n\r\n            });\r\n\r\n            using (var spSite = new SPSite(webUrl))\r\n            {\r\n                using (var spWeb = spSite.OpenWeb())\r\n                {\r\n                    // deploy site model with SharePoint Foundation SSOM API\r\n                    var foundationProvisionService = new SSOMProvisionService();\r\n                    foundationProvisionService.DeployWebModel(spWeb, webModel);\r\n\r\n                    // deploy site model with SharePoint Standard SSOM API\r\n                    var standardProvisionService = new StandardSSOMProvisionService();\r\n                    standardProvisionService.DeployWebModel(spWeb, webModel);\r\n                }\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region incremental\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void DeployIncrementally_Default_SSOM()\r\n        {\r\n            // setup url\r\n            var siteUrl = \"\";\r\n\r\n            // create you models\r\n            var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n            {\r\n\r\n            });\r\n\r\n            var webModel = SPMeta2Model.NewWebModel(web =>\r\n            {\r\n\r\n            });\r\n\r\n            using (var spSite = new SPSite(siteUrl))\r\n            {\r\n                using (var spWeb = spSite.OpenWeb())\r\n                {\r\n                    // deploy site model incrementally\r\n                    var provisionService = new StandardSSOMProvisionService();\r\n                    provisionService.DeploySiteModelIncrementally(spSite, siteModel, \"MySiteModelId\");\r\n\r\n                    // deploy web model incrementally\r\n                    provisionService.DeployWebModelIncrementally(spWeb, webModel, \"MyWebModelId\");\r\n                }\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void DeployIncrementally_Default_CSOM()\r\n        {\r\n            // setup web\r\n            var siteUrl = \"\";\r\n\r\n            // create you models\r\n            var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n            {\r\n\r\n            });\r\n\r\n            var webModel = SPMeta2Model.NewWebModel(web =>\r\n            {\r\n\r\n            });\r\n\r\n            // setup client context\r\n            using (var clientContext = new ClientContext(siteUrl))\r\n            {\r\n                // deploy site model incrementally\r\n                var provisionService = new StandardCSOMProvisionService();\r\n                provisionService.DeploySiteModelIncrementally(clientContext, siteModel, \"MySiteModelId\");\r\n\r\n                // deploy web model incrementally\r\n                provisionService.DeployWebModelIncrementally(clientContext, webModel, \"MyWebModelId\");\r\n            }\r\n        }\r\n\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.ProvisionServices\")]\r\n        public void DeployIncrementally_NormalSetup_CSOM()\r\n        {\r\n            // setup web\r\n            var siteUrl = \"\";\r\n\r\n            // create you models\r\n            var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n            {\r\n\r\n            });\r\n\r\n            var webModel = SPMeta2Model.NewWebModel(web =>\r\n            {\r\n\r\n            });\r\n\r\n            // setup client context\r\n            using (var clientContext = new ClientContext(siteUrl))\r\n            {\r\n                var provisionService = new StandardCSOMProvisionService();\r\n\r\n                // setup incremental provision settings\r\n                var incrementalProvisionConfig = new IncrementalProvisionConfig();\r\n\r\n                // 1 - store model hash in SharePoint \r\n                incrementalProvisionConfig.AutoDetectSharePointPersistenceStorage = true;\r\n\r\n                // 2 - set incremental provisio model for the provision service\r\n                provisionService.SetIncrementalProvisionMode(incrementalProvisionConfig);\r\n\r\n                // set model id for incremental provision\r\n                siteModel.SetIncrementalProvisionModelId(incrementalModelId);\r\n                webModel.SetIncrementalProvisionModelId(incrementalModelId);\r\n\r\n\r\n                // deploy incrementally\r\n                provisionService.DeploySiteModel(clientContext, siteModel);\r\n                provisionService.DeployWebModel(clientContext, webModel);\r\n\r\n                // revert back to normal provision mode\r\n                provisionService.SetDefaultProvisionMode();\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r\n        #endregion\r\n    }","MethodBody":"public class ProvisionServices : ProvisionTestBase\r\n{\r\n    #region methods\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void Deploy_SiteModel_CSOM()\r\n    {\r\n        // setup url\r\n        var siteUrl = \"\";\r\n\r\n        // create you model\r\n        var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n        {\r\n\r\n        });\r\n\r\n        // setup client context\r\n        using (var clientContext = new ClientContext(siteUrl))\r\n        {\r\n            // deploy site model with SharePoint Foundation CSOM API\r\n            var foundationProvisionService = new CSOMProvisionService();\r\n            foundationProvisionService.DeploySiteModel(clientContext, siteModel);\r\n\r\n            // deploy site model with SharePoint Standard CSOM API\r\n            var standardProvisionService = new StandardCSOMProvisionService();\r\n            standardProvisionService.DeploySiteModel(clientContext, siteModel);\r\n        }\r\n    }\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void Deploy_WebModel_CSOM()\r\n    {\r\n        // setup url\r\n        var webUrl = \"\";\r\n\r\n        // create you model\r\n        var webModel = SPMeta2Model.NewWebModel(web =>\r\n        {\r\n\r\n        });\r\n\r\n        // setup client context\r\n        using (var clientContext = new ClientContext(webUrl))\r\n        {\r\n            // deploy web model with SharePoint Foundation CSOM API\r\n            var foundationProvisionService = new CSOMProvisionService();\r\n            foundationProvisionService.DeployWebModel(clientContext, webModel);\r\n\r\n            // deploy web model with SharePoint Standard CSOM API\r\n            var standardProvisionService = new StandardCSOMProvisionService();\r\n            standardProvisionService.DeployWebModel(clientContext, webModel);\r\n        }\r\n    }\r\n\r\n    #region ssom\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void Deploy_FarmModel_SSOM()\r\n    {\r\n        // create you model\r\n        var farmModel = SPMeta2Model.NewFarmModel(farm =>\r\n        {\r\n\r\n        });\r\n\r\n        var spFarm = SPFarm.Local;\r\n\r\n        // deploy site model with SharePoint Foundation SSOM API\r\n        var foundationProvisionService = new SSOMProvisionService();\r\n        foundationProvisionService.DeployFarmModel(spFarm, farmModel);\r\n\r\n        // deploy site model with SharePoint Standard SSOM API\r\n        var standardProvisionService = new StandardSSOMProvisionService();\r\n        standardProvisionService.DeployFarmModel(spFarm, farmModel);\r\n    }\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void Deploy_WebApplicationModel_SSOM()\r\n    {\r\n        // setup url\r\n        var webAppUrl = \"\";\r\n\r\n        // create you model\r\n        var webAppModel = SPMeta2Model.NewWebApplicationModel(webApp =>\r\n        {\r\n\r\n        });\r\n\r\n        var spWebApp = SPWebApplication.Lookup(new Uri(webAppUrl));\r\n\r\n        // deploy site model with SharePoint Foundation SSOM API\r\n        var foundationProvisionService = new SSOMProvisionService();\r\n        foundationProvisionService.DeployWebApplicationModel(spWebApp, webAppModel);\r\n\r\n        // deploy site model with SharePoint Standard SSOM API\r\n        var standardProvisionService = new StandardSSOMProvisionService();\r\n        standardProvisionService.DeployWebApplicationModel(spWebApp, webAppModel);\r\n    }\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void Deploy_SiteModel_SSOM()\r\n    {\r\n        // setup url\r\n        var siteUrl = \"\";\r\n\r\n        // create you model\r\n        var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n        {\r\n\r\n        });\r\n\r\n        using (var spSite = new SPSite(siteUrl))\r\n        {\r\n            // deploy site model with SharePoint Foundation SSOM API\r\n            var foundationProvisionService = new SSOMProvisionService();\r\n            foundationProvisionService.DeploySiteModel(spSite, siteModel);\r\n\r\n            // deploy site model with SharePoint Standard SSOM API\r\n            var standardProvisionService = new StandardSSOMProvisionService();\r\n            standardProvisionService.DeploySiteModel(spSite, siteModel);\r\n        }\r\n    }\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void Deploy_WebModel_SSOM()\r\n    {\r\n        // setup url\r\n        var webUrl = \"\";\r\n\r\n        // create you model\r\n        var webModel = SPMeta2Model.NewWebModel(web =>\r\n        {\r\n\r\n        });\r\n\r\n        using (var spSite = new SPSite(webUrl))\r\n        {\r\n            using (var spWeb = spSite.OpenWeb())\r\n            {\r\n                // deploy site model with SharePoint Foundation SSOM API\r\n                var foundationProvisionService = new SSOMProvisionService();\r\n                foundationProvisionService.DeployWebModel(spWeb, webModel);\r\n\r\n                // deploy site model with SharePoint Standard SSOM API\r\n                var standardProvisionService = new StandardSSOMProvisionService();\r\n                standardProvisionService.DeployWebModel(spWeb, webModel);\r\n            }\r\n        }\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region incremental\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void DeployIncrementally_Default_SSOM()\r\n    {\r\n        // setup url\r\n        var siteUrl = \"\";\r\n\r\n        // create you models\r\n        var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n        {\r\n\r\n        });\r\n\r\n        var webModel = SPMeta2Model.NewWebModel(web =>\r\n        {\r\n\r\n        });\r\n\r\n        using (var spSite = new SPSite(siteUrl))\r\n        {\r\n            using (var spWeb = spSite.OpenWeb())\r\n            {\r\n                // deploy site model incrementally\r\n                var provisionService = new StandardSSOMProvisionService();\r\n                provisionService.DeploySiteModelIncrementally(spSite, siteModel, \"MySiteModelId\");\r\n\r\n                // deploy web model incrementally\r\n                provisionService.DeployWebModelIncrementally(spWeb, webModel, \"MyWebModelId\");\r\n            }\r\n        }\r\n    }\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void DeployIncrementally_Default_CSOM()\r\n    {\r\n        // setup web\r\n        var siteUrl = \"\";\r\n\r\n        // create you models\r\n        var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n        {\r\n\r\n        });\r\n\r\n        var webModel = SPMeta2Model.NewWebModel(web =>\r\n        {\r\n\r\n        });\r\n\r\n        // setup client context\r\n        using (var clientContext = new ClientContext(siteUrl))\r\n        {\r\n            // deploy site model incrementally\r\n            var provisionService = new StandardCSOMProvisionService();\r\n            provisionService.DeploySiteModelIncrementally(clientContext, siteModel, \"MySiteModelId\");\r\n\r\n            // deploy web model incrementally\r\n            provisionService.DeployWebModelIncrementally(clientContext, webModel, \"MyWebModelId\");\r\n        }\r\n    }\r\n\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.ProvisionServices\")]\r\n    public void DeployIncrementally_NormalSetup_CSOM()\r\n    {\r\n        // setup web\r\n        var siteUrl = \"\";\r\n\r\n        // create you models\r\n        var siteModel = SPMeta2Model.NewSiteModel(site =>\r\n        {\r\n\r\n        });\r\n\r\n        var webModel = SPMeta2Model.NewWebModel(web =>\r\n        {\r\n\r\n        });\r\n\r\n        // setup client context\r\n        using (var clientContext = new ClientContext(siteUrl))\r\n        {\r\n            var provisionService = new StandardCSOMProvisionService();\r\n\r\n            // setup incremental provision settings\r\n            var incrementalProvisionConfig = new IncrementalProvisionConfig();\r\n\r\n            // 1 - store model hash in SharePoint\r\n            incrementalProvisionConfig.AutoDetectSharePointPersistenceStorage = true;\r\n\r\n            // 2 - set incremental provisio model for the provision service\r\n            provisionService.SetIncrementalProvisionMode(incrementalProvisionConfig);\r\n\r\n            // set model id for incremental provision\r\n            siteModel.SetIncrementalProvisionModelId(incrementalModelId);\r\n            webModel.SetIncrementalProvisionModelId(incrementalModelId);\r\n\r\n\r\n            // deploy incrementally\r\n            provisionService.DeploySiteModel(clientContext, siteModel);\r\n            provisionService.DeployWebModel(clientContext, webModel);\r\n\r\n            // revert back to normal provision mode\r\n            provisionService.SetDefaultProvisionMode();\r\n        }\r\n    }\r\n\r\n    #endregion\r\n\r\n    #endregion\r\n}\r\n","Language":"cs","Namespace":"SubPointSolutions.Docs.Views.Views.SPMeta2.reference","ClassName":"ProvisionServices","MethodName":"ProvisionServicesClass","ClassComment":"","MethodFullName":"ClassProvisionServicesClass","ClassFullName":"SubPointSolutions.Docs.Views.Views.SPMeta2.reference.ProvisionServices","MethodParametersCount":0,"SourceFileName":"ProvisionServices.cs","SourceFileNameWithoutExtension":"ProvisionServices"}