<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <IsMethod>false</IsMethod>
  <IsClass>true</IsClass>
  <Tags>
    <DocSampleTag>
      <Name>Category</Name>
      <Values>
        <string>Web Model</string>
        <string>Module files</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isFoundation</Name>
      <Values>
        <string>True</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isStandard</Name>
      <Values>
        <string>False</string>
      </Values>
    </DocSampleTag>
  </Tags>
  <Title />
  <Description />
  <MethodBodyWithFunction>    
    
    
    //[Browsable(false)]
    public class ModuleFileDefinitionTests : ProvisionTestBase
    {
        #region methods

        [TestMethod]
        [TestCategory("Docs.ModuleFileDefinition")]

        [DisplayName("Add module file to Style Library")]
        //[Browsable(false)]
        public void CanDeployModuleFilesToStyleLibrary()
        {
            var cssFile = new ModuleFileDefinition
            {
                FileName = "m2-styles.css",
                Overwrite = true,
                Content = Encoding.UTF8.GetBytes(".m2-content { padding:10px; border:1px red solid; } ")
            };

            var jsFile = new ModuleFileDefinition
            {
                FileName = "m2-app.js",
                Overwrite = true,
                Content = Encoding.UTF8.GetBytes(" alert('hello, m2!'); ")
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web.AddHostList(BuiltInListDefinitions.StyleLibrary, list =&gt;
                {
                    list
                        .AddModuleFile(cssFile)
                        .AddModuleFile(jsFile);
                });
            });

            DeployModel(model);
        }

        [TestMethod]
        [TestCategory("Docs.ModuleFileDefinition")]
        [DisplayName("Add module file to folder")]
        //[Browsable(false)]

        public void CanDeployModuleFilesToFolders()
        {
            var cssFile = new ModuleFileDefinition
            {
                FileName = "m2-red.css",
                Overwrite = true,
                Content = Encoding.UTF8.GetBytes(".m2-red { color:red; } ")
            };

            var jsFile = new ModuleFileDefinition
            {
                FileName = "m2-logger-module.js",
                Overwrite = true,
                Content = Encoding.UTF8.GetBytes(" function(msg) { console.log(msg); } ")
            };

            var cssFolder = new FolderDefinition
            {
                Name = "m2-css"
            };

            var jsFolder = new FolderDefinition
            {
                Name = "m2-js"
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web.AddHostList(BuiltInListDefinitions.StyleLibrary, list =&gt;
                {
                    list
                        .AddFolder(cssFolder, folder =&gt;
                        {
                            folder.AddModuleFile(cssFile);
                        })
                        .AddFolder(jsFolder, folder =&gt;
                        {
                            folder.AddModuleFile(jsFile);
                        });
                });
            });

            DeployModel(model);
        }

        #endregion
    }</MethodBodyWithFunction>
  <MethodBody>//[Browsable(false)]
public class ModuleFileDefinitionTests : ProvisionTestBase
{
    #region methods

    [TestMethod]
    [TestCategory("Docs.ModuleFileDefinition")]

    [DisplayName("Add module file to Style Library")]
    //[Browsable(false)]
    public void CanDeployModuleFilesToStyleLibrary()
    {
        var cssFile = new ModuleFileDefinition
        {
            FileName = "m2-styles.css",
            Overwrite = true,
            Content = Encoding.UTF8.GetBytes(".m2-content { padding:10px; border:1px red solid; } ")
        };

        var jsFile = new ModuleFileDefinition
        {
            FileName = "m2-app.js",
            Overwrite = true,
            Content = Encoding.UTF8.GetBytes(" alert('hello, m2!'); ")
        };

        var model = SPMeta2Model.NewWebModel(web =&gt;
        {
            web.AddHostList(BuiltInListDefinitions.StyleLibrary, list =&gt;
            {
                list
                    .AddModuleFile(cssFile)
                    .AddModuleFile(jsFile);
            });
        });

        DeployModel(model);
    }

    [TestMethod]
    [TestCategory("Docs.ModuleFileDefinition")]
    [DisplayName("Add module file to folder")]
    //[Browsable(false)]

    public void CanDeployModuleFilesToFolders()
    {
        var cssFile = new ModuleFileDefinition
        {
            FileName = "m2-red.css",
            Overwrite = true,
            Content = Encoding.UTF8.GetBytes(".m2-red { color:red; } ")
        };

        var jsFile = new ModuleFileDefinition
        {
            FileName = "m2-logger-module.js",
            Overwrite = true,
            Content = Encoding.UTF8.GetBytes(" function(msg) { console.log(msg); } ")
        };

        var cssFolder = new FolderDefinition
        {
            Name = "m2-css"
        };

        var jsFolder = new FolderDefinition
        {
            Name = "m2-js"
        };

        var model = SPMeta2Model.NewWebModel(web =&gt;
        {
            web.AddHostList(BuiltInListDefinitions.StyleLibrary, list =&gt;
            {
                list
                    .AddFolder(cssFolder, folder =&gt;
                    {
                        folder.AddModuleFile(cssFile);
                    })
                    .AddFolder(jsFolder, folder =&gt;
                    {
                        folder.AddModuleFile(jsFile);
                    });
            });
        });

        DeployModel(model);
    }

    #endregion
}
</MethodBody>
  <Language>cs</Language>
  <Namespace>SPMeta2.Docs.ProvisionSamples.Provision.Definitions</Namespace>
  <ClassName>ModuleFileDefinitionTests</ClassName>
  <MethodName>ModuleFileDefinitionTestsClass</MethodName>
  <ClassComment />
  <MethodFullName>ClassModuleFileDefinitionTestsClass</MethodFullName>
  <ClassFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.ModuleFileDefinitionTests</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>ModuleFileDefinitionTests.cs</SourceFileName>
  <SourceFileNameWithoutExtension>ModuleFileDefinitionTests</SourceFileNameWithoutExtension>
</DocSample>