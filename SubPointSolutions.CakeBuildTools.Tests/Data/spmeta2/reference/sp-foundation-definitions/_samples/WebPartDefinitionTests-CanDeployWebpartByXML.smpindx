<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <IsMethod>true</IsMethod>
  <IsClass>false</IsClass>
  <Tags>
    <DocSampleTag>
      <Name>Category</Name>
      <Values>
        <string>Web Model</string>
        <string>Web parts</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isFoundation</Name>
      <Values>
        <string>True</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isStandard</Name>
      <Values>
        <string>False</string>
      </Values>
    </DocSampleTag>
  </Tags>
  <Title>Add web part by XML</Title>
  <MethodBodyWithFunction>
        


        
        //[Browsable(false)]
        public void CanDeployWebpartByXML()
        {
            // this whould deploy the web part using WebpartXmlTemplate prop
            // you need to provide an XML template which you get from SharePoint
            // export the wenb part, and put it into WebpartXmlTemplate prop

            // here is a web part XML template
            // usually, you export that XML from SharePoint page, but M2 has pre-build class
            var contentEditorWebPartXml = BuiltInWebPartTemplates.ContentEditorWebPart;

            var contentEditorWebPart = new WebPartDefinition
            {
                Title = "About SharePoint XML",
                Id = "m2AboutSharePointXML",
                WebpartXmlTemplate = contentEditorWebPartXml,
                ZoneIndex = 20,
                ZoneId = "Main"
            };

            var webPartPage = new WebPartPageDefinition
            {
                Title = "M2 webparts provision",
                FileName = "web-parts-provision.aspx",
                PageLayoutTemplate = BuiltInWebPartPageTemplates.spstd1
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web.AddHostList(BuiltInListDefinitions.SitePages, list =&gt;
                {
                    list.AddWebPartPage(webPartPage, page =&gt;
                    {
                        page.AddWebPart(contentEditorWebPart);
                    });
                });
            });

            DeployModel(model);
        }</MethodBodyWithFunction>
  <MethodBody>// this whould deploy the web part using WebpartXmlTemplate prop
// you need to provide an XML template which you get from SharePoint
// export the wenb part, and put it into WebpartXmlTemplate prop

// here is a web part XML template
// usually, you export that XML from SharePoint page, but M2 has pre-build class
var contentEditorWebPartXml = BuiltInWebPartTemplates.ContentEditorWebPart;

var contentEditorWebPart = new WebPartDefinition
{
    Title = "About SharePoint XML",
    Id = "m2AboutSharePointXML",
    WebpartXmlTemplate = contentEditorWebPartXml,
    ZoneIndex = 20,
    ZoneId = "Main"
};

var webPartPage = new WebPartPageDefinition
{
    Title = "M2 webparts provision",
    FileName = "web-parts-provision.aspx",
    PageLayoutTemplate = BuiltInWebPartPageTemplates.spstd1
};

var model = SPMeta2Model.NewWebModel(web =&gt;
{
    web.AddHostList(BuiltInListDefinitions.SitePages, list =&gt;
    {
        list.AddWebPartPage(webPartPage, page =&gt;
        {
            page.AddWebPart(contentEditorWebPart);
        });
    });
});

DeployModel(model);

</MethodBody>
  <Language>cs</Language>
  <Namespace>SPMeta2.Docs.ProvisionSamples.Provision.Definitions</Namespace>
  <ClassName>WebPartDefinitionTests</ClassName>
  <MethodName>CanDeployWebpartByXML</MethodName>
  <ClassComment />
  <MethodFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.WebPartDefinitionTests.CanDeployWebpartByXML</MethodFullName>
  <ClassFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.WebPartDefinitionTests</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>WebPartDefinitionTests.cs</SourceFileName>
  <SourceFileNameWithoutExtension>WebPartDefinitionTests</SourceFileNameWithoutExtension>
</DocSample>