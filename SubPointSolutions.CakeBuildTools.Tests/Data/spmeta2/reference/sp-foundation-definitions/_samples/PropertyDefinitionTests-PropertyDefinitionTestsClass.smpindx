<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <IsMethod>false</IsMethod>
  <IsClass>true</IsClass>
  <Tags>
    <DocSampleTag>
      <Name>isFoundation</Name>
      <Values>
        <string>True</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isStandard</Name>
      <Values>
        <string>False</string>
      </Values>
    </DocSampleTag>
  </Tags>
  <Title />
  <Description />
  <MethodBodyWithFunction>    


    //[Browsable(false)]
    public class PropertyDefinitionTests : ProvisionTestBase
    {
        #region methods

        [TestMethod]
        [TestCategory("Docs.PropertyDefinition")]

        [Category("Category=Farm Model/Property bags")]
        [DisplayName("Add property to farm")]
        //[Browsable(false)]
        public void CanDeployPropertyBagUnderFarm()
        {
            var farmTag = new PropertyDefinition
            {
                Key = "m2_farm_tag",
                Value = "m2_farm_tag_value",
            };

            var farmType = new PropertyDefinition
            {
                Key = "m2_farm_type",
                Value = "m2_farm_type_value",
            };

            var model = SPMeta2Model.NewFarmModel(farm =&gt;
            {
                farm
                    .AddProperty(farmTag)
                    .AddProperty(farmType);
            });

            DeploySSOMModel(model);
        }

        [TestMethod]
        [TestCategory("Docs.PropertyDefinition")]


        [Category("Category=Site Collection Model/Property bags")]
        [DisplayName("Add property to site")]
        //[Browsable(false)]
        public void CanDeployPropertyBagUnderSite()
        {
            var siteTag = new PropertyDefinition
            {
                Key = "m2_site_tag",
                Value = "m2_site_tag_value",
            };

            var siteType = new PropertyDefinition
            {
                Key = "m2_site_type",
                Value = "m2_site_type_value",
            };

            var model = SPMeta2Model.NewSiteModel(site =&gt;
            {
                site
                    .AddProperty(siteTag)
                    .AddProperty(siteType);
            });

            DeployModel(model);
        }

        [TestMethod]
        [TestCategory("Docs.PropertyDefinition")]

        [Category("Category=Web Model/Property bags")]

        [DisplayName("Add property to web")]
        //[Browsable(false)]
        public void CanDeployPropertyBagUnderWeb()
        {
            var webTag = new PropertyDefinition
            {
                Key = "m2_web_tag",
                Value = "m2_web_tag_value",
            };

            var webType = new PropertyDefinition
            {
                Key = "m2_web_type",
                Value = "m2_web_type_value",
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web
                 .AddProperty(webTag)
                 .AddProperty(webType);
            });

            DeployModel(model);
        }

        [TestMethod]
        [TestCategory("Docs.PropertyDefinition")]
        
        [Category("Category=Web Model/Property bags")]

        [DisplayName("Add property to list")]
        //[Browsable(false)]
        public void CanDeployPropertyBagUnderList()
        {
            var listTag = new PropertyDefinition
            {
                Key = "m2_list_tag",
                Value = "m2_list_tag_value",
            };

            var listType = new PropertyDefinition
            {
                Key = "m2_web_type",
                Value = "m2_web_type_value",
            };

            var listWithProperties = new ListDefinition
            {
                Title = "List with properties",
                Description = "List with some properties.",
                TemplateType = BuiltInListTemplateTypeId.GenericList,
                Url = "ListWithProperties"
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web.AddList(listWithProperties, list =&gt;
                {
                    list
                      .AddProperty(listTag)
                      .AddProperty(listType);
                });
            });

            DeployModel(model);
        }


        [TestMethod]
        [TestCategory("Docs.PropertyDefinition")]

        [Category("Category=Web Model/Property bags")]

        [DisplayName("Add property to folder")]
        //[Browsable(false)]
        public void CanDeployPropertyBagUnderFolder()
        {
            var folderTag = new PropertyDefinition
            {
                Key = "m2_folder_tag",
                Value = "m2_folder_tag_value",
            };

            var folderType = new PropertyDefinition
            {
                Key = "m2_folder_type",
                Value = "m2_folder_type_value",
            };

            var listWithProperties = new ListDefinition
            {
                Title = "List with properties",
                Description = "List with some properties.",
                TemplateType = BuiltInListTemplateTypeId.GenericList,
                Url = "ListWithProperties"
            };

            var fodlerWithProperties = new FolderDefinition
            {
                Name = "folder with properties"
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web.AddList(listWithProperties, list =&gt;
                {
                    list.AddFolder(fodlerWithProperties, folder =&gt;
                    {
                        // Syntax miss - folder should support adding props #669 
                        // https://github.com/SubPointSolutions/spmeta2/issues/669

                        //folder
                        //    .AddProperty(folderTag)
                        //    .AddProperty(folderType);

                        folder
                            .AddDefinitionNode(folderTag)
                            .AddDefinitionNode(folderType);
                    });

                });
            });

            DeployModel(model);
        }

        #endregion
    }</MethodBodyWithFunction>
  <MethodBody>//[Browsable(false)]
public class PropertyDefinitionTests : ProvisionTestBase
{
    #region methods

    [TestMethod]
    [TestCategory("Docs.PropertyDefinition")]

    [Category("Category=Farm Model/Property bags")]
    [DisplayName("Add property to farm")]
    //[Browsable(false)]
    public void CanDeployPropertyBagUnderFarm()
    {
        var farmTag = new PropertyDefinition
        {
            Key = "m2_farm_tag",
            Value = "m2_farm_tag_value",
        };

        var farmType = new PropertyDefinition
        {
            Key = "m2_farm_type",
            Value = "m2_farm_type_value",
        };

        var model = SPMeta2Model.NewFarmModel(farm =&gt;
        {
            farm
                .AddProperty(farmTag)
                .AddProperty(farmType);
        });

        DeploySSOMModel(model);
    }

    [TestMethod]
    [TestCategory("Docs.PropertyDefinition")]


    [Category("Category=Site Collection Model/Property bags")]
    [DisplayName("Add property to site")]
    //[Browsable(false)]
    public void CanDeployPropertyBagUnderSite()
    {
        var siteTag = new PropertyDefinition
        {
            Key = "m2_site_tag",
            Value = "m2_site_tag_value",
        };

        var siteType = new PropertyDefinition
        {
            Key = "m2_site_type",
            Value = "m2_site_type_value",
        };

        var model = SPMeta2Model.NewSiteModel(site =&gt;
        {
            site
                .AddProperty(siteTag)
                .AddProperty(siteType);
        });

        DeployModel(model);
    }

    [TestMethod]
    [TestCategory("Docs.PropertyDefinition")]

    [Category("Category=Web Model/Property bags")]

    [DisplayName("Add property to web")]
    //[Browsable(false)]
    public void CanDeployPropertyBagUnderWeb()
    {
        var webTag = new PropertyDefinition
        {
            Key = "m2_web_tag",
            Value = "m2_web_tag_value",
        };

        var webType = new PropertyDefinition
        {
            Key = "m2_web_type",
            Value = "m2_web_type_value",
        };

        var model = SPMeta2Model.NewWebModel(web =&gt;
        {
            web
             .AddProperty(webTag)
             .AddProperty(webType);
        });

        DeployModel(model);
    }

    [TestMethod]
    [TestCategory("Docs.PropertyDefinition")]

    [Category("Category=Web Model/Property bags")]

    [DisplayName("Add property to list")]
    //[Browsable(false)]
    public void CanDeployPropertyBagUnderList()
    {
        var listTag = new PropertyDefinition
        {
            Key = "m2_list_tag",
            Value = "m2_list_tag_value",
        };

        var listType = new PropertyDefinition
        {
            Key = "m2_web_type",
            Value = "m2_web_type_value",
        };

        var listWithProperties = new ListDefinition
        {
            Title = "List with properties",
            Description = "List with some properties.",
            TemplateType = BuiltInListTemplateTypeId.GenericList,
            Url = "ListWithProperties"
        };

        var model = SPMeta2Model.NewWebModel(web =&gt;
        {
            web.AddList(listWithProperties, list =&gt;
            {
                list
                  .AddProperty(listTag)
                  .AddProperty(listType);
            });
        });

        DeployModel(model);
    }


    [TestMethod]
    [TestCategory("Docs.PropertyDefinition")]

    [Category("Category=Web Model/Property bags")]

    [DisplayName("Add property to folder")]
    //[Browsable(false)]
    public void CanDeployPropertyBagUnderFolder()
    {
        var folderTag = new PropertyDefinition
        {
            Key = "m2_folder_tag",
            Value = "m2_folder_tag_value",
        };

        var folderType = new PropertyDefinition
        {
            Key = "m2_folder_type",
            Value = "m2_folder_type_value",
        };

        var listWithProperties = new ListDefinition
        {
            Title = "List with properties",
            Description = "List with some properties.",
            TemplateType = BuiltInListTemplateTypeId.GenericList,
            Url = "ListWithProperties"
        };

        var fodlerWithProperties = new FolderDefinition
        {
            Name = "folder with properties"
        };

        var model = SPMeta2Model.NewWebModel(web =&gt;
        {
            web.AddList(listWithProperties, list =&gt;
            {
                list.AddFolder(fodlerWithProperties, folder =&gt;
                {
                    // Syntax miss - folder should support adding props #669
                    // https://github.com/SubPointSolutions/spmeta2/issues/669

                    //folder
                    //    .AddProperty(folderTag)
                    //    .AddProperty(folderType);

                    folder
                        .AddDefinitionNode(folderTag)
                        .AddDefinitionNode(folderType);
                });

            });
        });

        DeployModel(model);
    }

    #endregion
}
</MethodBody>
  <Language>cs</Language>
  <Namespace>SPMeta2.Docs.ProvisionSamples.Provision.Definitions</Namespace>
  <ClassName>PropertyDefinitionTests</ClassName>
  <MethodName>PropertyDefinitionTestsClass</MethodName>
  <ClassComment />
  <MethodFullName>ClassPropertyDefinitionTestsClass</MethodFullName>
  <ClassFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.PropertyDefinitionTests</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>PropertyDefinitionTests.cs</SourceFileName>
  <SourceFileNameWithoutExtension>PropertyDefinitionTests</SourceFileNameWithoutExtension>
</DocSample>