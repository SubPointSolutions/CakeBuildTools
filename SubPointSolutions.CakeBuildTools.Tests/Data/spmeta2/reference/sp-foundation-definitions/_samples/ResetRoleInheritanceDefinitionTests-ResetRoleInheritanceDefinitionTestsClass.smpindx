<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <IsMethod>false</IsMethod>
  <IsClass>true</IsClass>
  <Tags>
    <DocSampleTag>
      <Name>Category</Name>
      <Values>
        <string>Web Model</string>
        <string>Security</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isFoundation</Name>
      <Values>
        <string>True</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isStandard</Name>
      <Values>
        <string>False</string>
      </Values>
    </DocSampleTag>
  </Tags>
  <Title />
  <Description />
  <MethodBodyWithFunction>    
    

    


    //[Browsable(false)]
    public class ResetRoleInheritanceDefinitionTests : ProvisionTestBase
    {
        #region methods

        [TestMethod]
        [TestCategory("Docs.ResetRoleInheritanceDefinition")]


        [DisplayName("Reset role inheritance on list")]
        public void CanDeployResetRoleInheritanceDefinition_OnList()
        {
            var listDef = new ListDefinition
            {
                Title = "Public records",
                TemplateType = BuiltInListTemplateTypeId.GenericList,
                CustomUrl = "lists/public-records",
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web.AddList(listDef, list =&gt;
                {
                    list.AddResetRoleInheritance(new ResetRoleInheritanceDefinition(), resetList =&gt;
                    {
                        // resetList is your list but after resetting role inheritance
                        // build your model as usual

                        // resetList.AddListView(...)
                    });
                });
            });

            DeployModel(model);
        }

        [TestMethod]
        [TestCategory("Docs.ResetRoleInheritanceDefinition")]


        [DisplayName("Reset role inheritance on web")]
        public void CanDeployResetRoleInheritanceDefinition_OnWeb()
        {
            var publicProjectWebDef = new WebDefinition
            {
                Title = "Public project",
                Url = "public-project",
                WebTemplate = BuiltInWebTemplates.Collaboration.TeamSite
            };

            var model = SPMeta2Model.NewWebModel(web =&gt;
            {
                web.AddWeb(publicProjectWebDef, publicProjectWeb =&gt;
                {
                    publicProjectWeb.AddResetRoleInheritance(new ResetRoleInheritanceDefinition(), publicProjectResetWeb =&gt;
                    {
                        // publicProjectResetWeb is your web but after resetting role inheritance
                        // build your model as usual

                        // publicProjectResetWeb.AddList(...)
                    });
                });
            });

            DeployModel(model);
        }

        #endregion
    }</MethodBodyWithFunction>
  <MethodBody>//[Browsable(false)]
public class ResetRoleInheritanceDefinitionTests : ProvisionTestBase
{
    #region methods

    [TestMethod]
    [TestCategory("Docs.ResetRoleInheritanceDefinition")]


    [DisplayName("Reset role inheritance on list")]
    public void CanDeployResetRoleInheritanceDefinition_OnList()
    {
        var listDef = new ListDefinition
        {
            Title = "Public records",
            TemplateType = BuiltInListTemplateTypeId.GenericList,
            CustomUrl = "lists/public-records",
        };

        var model = SPMeta2Model.NewWebModel(web =&gt;
        {
            web.AddList(listDef, list =&gt;
            {
                list.AddResetRoleInheritance(new ResetRoleInheritanceDefinition(), resetList =&gt;
                {
                    // resetList is your list but after resetting role inheritance
                    // build your model as usual

                    // resetList.AddListView(...)
                });
            });
        });

        DeployModel(model);
    }

    [TestMethod]
    [TestCategory("Docs.ResetRoleInheritanceDefinition")]


    [DisplayName("Reset role inheritance on web")]
    public void CanDeployResetRoleInheritanceDefinition_OnWeb()
    {
        var publicProjectWebDef = new WebDefinition
        {
            Title = "Public project",
            Url = "public-project",
            WebTemplate = BuiltInWebTemplates.Collaboration.TeamSite
        };

        var model = SPMeta2Model.NewWebModel(web =&gt;
        {
            web.AddWeb(publicProjectWebDef, publicProjectWeb =&gt;
            {
                publicProjectWeb.AddResetRoleInheritance(new ResetRoleInheritanceDefinition(), publicProjectResetWeb =&gt;
                {
                    // publicProjectResetWeb is your web but after resetting role inheritance
                    // build your model as usual

                    // publicProjectResetWeb.AddList(...)
                });
            });
        });

        DeployModel(model);
    }

    #endregion
}
</MethodBody>
  <Language>cs</Language>
  <Namespace>SPMeta2.Docs.ProvisionSamples.Provision.Definitions</Namespace>
  <ClassName>ResetRoleInheritanceDefinitionTests</ClassName>
  <MethodName>ResetRoleInheritanceDefinitionTestsClass</MethodName>
  <ClassComment />
  <MethodFullName>ClassResetRoleInheritanceDefinitionTestsClass</MethodFullName>
  <ClassFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.ResetRoleInheritanceDefinitionTests</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>ResetRoleInheritanceDefinitionTests.cs</SourceFileName>
  <SourceFileNameWithoutExtension>ResetRoleInheritanceDefinitionTests</SourceFileNameWithoutExtension>
</DocSample>