<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <IsMethod>false</IsMethod>
  <IsClass>true</IsClass>
  <Tags>
    <DocSampleTag>
      <Name>Category</Name>
      <Values>
        <string>Web Application Model</string>
        <string>Web application</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>CategoryOrder</Name>
      <Values>
        <string>200</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isFoundation</Name>
      <Values>
        <string>True</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isStandard</Name>
      <Values>
        <string>False</string>
      </Values>
    </DocSampleTag>
  </Tags>
  <Title />
  <Description />
  <MethodBodyWithFunction>    

    

    public class AlternateUrlDefinitionTests : ProvisionTestBase
    {
        #region methods

        [TestMethod]
        [TestCategory("Docs.AlternateUrlDefinition")]

        [DisplayName("Add alternate URL")]
        public void CanDeploySimpleAlternateUrlDefinition()
        {
            var internalDef = new AlternateUrlDefinition
            {
                Url = "http://the-portal",
                UrlZone = BuiltInUrlZone.Intranet
            };

            var intranetDef = new AlternateUrlDefinition
            {
                Url = "http://my-intranet.com.au",
                UrlZone = BuiltInUrlZone.Internet
            };

            var model = SPMeta2Model.NewWebApplicationModel(webApp =&gt;
            {
                webApp.AddAlternateUrl(internalDef);
                webApp.AddAlternateUrl(intranetDef);
            });

            DeployModel(model);
        }

        #endregion
    }</MethodBodyWithFunction>
  <MethodBody>public class AlternateUrlDefinitionTests : ProvisionTestBase
{
    #region methods

    [TestMethod]
    [TestCategory("Docs.AlternateUrlDefinition")]

    [DisplayName("Add alternate URL")]
    public void CanDeploySimpleAlternateUrlDefinition()
    {
        var internalDef = new AlternateUrlDefinition
        {
            Url = "http://the-portal",
            UrlZone = BuiltInUrlZone.Intranet
        };

        var intranetDef = new AlternateUrlDefinition
        {
            Url = "http://my-intranet.com.au",
            UrlZone = BuiltInUrlZone.Internet
        };

        var model = SPMeta2Model.NewWebApplicationModel(webApp =&gt;
        {
            webApp.AddAlternateUrl(internalDef);
            webApp.AddAlternateUrl(intranetDef);
        });

        DeployModel(model);
    }

    #endregion
}
</MethodBody>
  <Language>cs</Language>
  <Namespace>SPMeta2.Docs.ProvisionSamples.Provision.Definitions</Namespace>
  <ClassName>AlternateUrlDefinitionTests</ClassName>
  <MethodName>AlternateUrlDefinitionTestsClass</MethodName>
  <ClassComment />
  <MethodFullName>ClassAlternateUrlDefinitionTestsClass</MethodFullName>
  <ClassFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.AlternateUrlDefinitionTests</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>AlternateUrlDefinitionTests.cs</SourceFileName>
  <SourceFileNameWithoutExtension>AlternateUrlDefinitionTests</SourceFileNameWithoutExtension>
</DocSample>