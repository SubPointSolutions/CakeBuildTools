<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <IsMethod>true</IsMethod>
  <IsClass>false</IsClass>
  <Tags>
    <DocSampleTag>
      <Name>Category</Name>
      <Values>
        <string>Site Collection Model</string>
        <string>Site collection</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isFoundation</Name>
      <Values>
        <string>True</string>
      </Values>
    </DocSampleTag>
    <DocSampleTag>
      <Name>isStandard</Name>
      <Values>
        <string>False</string>
      </Values>
    </DocSampleTag>
  </Tags>
  <Title>Add parent-child content types</Title>
  <MethodBodyWithFunction>
        

        
        //[Browsable(false)]
        public void CanDeployHierarhicalContentTypes()
        {
            var rootDocumentContentType = new ContentTypeDefinition
            {
                Name = "A root document",
                Id = new Guid("b0ec3794-8bf3-49ed-b8d1-24a4df5ac75b"),
                ParentContentTypeId = BuiltInContentTypeId.Document,
                Group = "SPMeta2.Samples"
            };

            var childDocumentContentType = new ContentTypeDefinition
            {
                Name = "A child document",
                Id = new Guid("84ab43ee-1f9d-4436-a9de-868bd7a36400"),
                // use GetContentTypeId() to get the content type ID and refer as a parent ID
                ParentContentTypeId = rootDocumentContentType.GetContentTypeId(),
                Group = "SPMeta2.Samples"
            };

            var model = SPMeta2Model.NewSiteModel(site =&gt;
            {
                site
                   .AddContentType(rootDocumentContentType)
                   .AddContentType(childDocumentContentType);
            });

            DeployModel(model);
        }</MethodBodyWithFunction>
  <MethodBody>var rootDocumentContentType = new ContentTypeDefinition
{
    Name = "A root document",
    Id = new Guid("b0ec3794-8bf3-49ed-b8d1-24a4df5ac75b"),
    ParentContentTypeId = BuiltInContentTypeId.Document,
    Group = "SPMeta2.Samples"
};

var childDocumentContentType = new ContentTypeDefinition
{
    Name = "A child document",
    Id = new Guid("84ab43ee-1f9d-4436-a9de-868bd7a36400"),
    // use GetContentTypeId() to get the content type ID and refer as a parent ID
    ParentContentTypeId = rootDocumentContentType.GetContentTypeId(),
    Group = "SPMeta2.Samples"
};

var model = SPMeta2Model.NewSiteModel(site =&gt;
{
    site
       .AddContentType(rootDocumentContentType)
       .AddContentType(childDocumentContentType);
});

DeployModel(model);

</MethodBody>
  <Language>cs</Language>
  <Namespace>SPMeta2.Docs.ProvisionSamples.Provision.Definitions</Namespace>
  <ClassName>ContentTypeDefinitionTests</ClassName>
  <MethodName>CanDeployHierarhicalContentTypes</MethodName>
  <ClassComment />
  <MethodFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.ContentTypeDefinitionTests.CanDeployHierarhicalContentTypes</MethodFullName>
  <ClassFullName>SPMeta2.Docs.ProvisionSamples.Provision.Definitions.ContentTypeDefinitionTests</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>ContentTypeDefinitionTests.cs</SourceFileName>
  <SourceFileNameWithoutExtension>ContentTypeDefinitionTests</SourceFileNameWithoutExtension>
</DocSample>