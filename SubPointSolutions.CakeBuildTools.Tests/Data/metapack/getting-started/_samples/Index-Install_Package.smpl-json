{"IsMethod":true,"IsClass":false,"Tags":[],"Scope":null,"Title":null,"Description":null,"MethodBodyWithFunction":"\r\n        \r\n        public void Install_Package()\r\n        {\r\n            // create SharePoint client contex under which MetaPack will be working\r\n\r\n            var siteUrl = \"http://contoso-intranet.local\";\r\n\r\n            using (var clientContext = new ClientContext(siteUrl))\r\n            {\r\n                // you can use it with SharePointOnlineCredentials for O365\r\n                // as well as NetworkCredential for SP2013\r\n                // context.Credentials = new NetworkCredential(userName, securePassword);\r\n                // context.Credentials = new SharePointOnlineCredentials(userName, securePassword);\r\n\r\n\r\n                // create package manager providing client context and NuGet Gallery to work with\r\n                // for instance, as following:\r\n                // nuget.org - https://packages.nuget.org/api/v2\r\n                // myget.org - https://www.myget.org/F/subpointsolutions-staging/api/v2/package\r\n                var nuGetRepository = PackageRepositoryFactory.Default.CreateRepository(\"https://packages.nuget.org/api/v2\");\r\n                var packageManager = new DefaultMetaPackSolutionPackageManager(nuGetRepository, clientContext);\r\n\r\n                // get your NuGet package by its ID \r\n                var nuGetPackage = nuGetRepository.FindPackage(\"Contoso.Intranet.SiteFields.PnP\");\r\n\r\n                // configure additional options\r\n                // deployment provider such as PnP or SPMeta2 uses these flags to understand:\r\n                // - SharePoint version (SP2013, SP2016, O365\r\n                // - SharePoint API (CSOM, SSOM for SPMeta2 and CSOM for PnP)\r\n                // - SharePoint Edition (Standard / Foundation for SPMeta2)\r\n                var solutionOptions = new List<OptionValue>();\r\n\r\n                solutionOptions.Add(DefaultOptions.SharePoint.Api.CSOM);\r\n                solutionOptions.Add(DefaultOptions.SharePoint.Edition.Standard);\r\n                solutionOptions.Add(DefaultOptions.SharePoint.Version.O365);\r\n\r\n                // target site Url on which youe solution will be deployed\r\n                solutionOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.Site.Url.Id,\r\n                    Value = siteUrl\r\n                });\r\n\r\n                // provide username/password if needed\r\n                // deployment provider will use these in conjunction with CSOM deployment\r\n                // to connect to O365 or local SharePoint via CSOM\r\n                // if SharePoint version was O365, then SharePointOnlineCredentials will be used\r\n                // if SharePoint version was Sp2013/2016, then NetworkCredential will be used\r\n                // if no username/password is provided, then defaultcreds will be used as if you were on SharePoint box itself\r\n                solutionOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.User.Name.Id,\r\n                    Value = \"user@contoso.com\"\r\n                });\r\n\r\n                solutionOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.User.Password.Id,\r\n                    Value = \"pass@word1\"\r\n                });\r\n\r\n                packageManager.SolutionOptions.AddRange(solutionOptions);\r\n\r\n                // install package\r\n                // metapack will resolve and install all the things for you\r\n                packageManager.InstallPackage(nuGetPackage, false, false);\r\n            }\r\n        }","MethodBody":"// create SharePoint client contex under which MetaPack will be working\r\n\r\nvar siteUrl = \"http://contoso-intranet.local\";\r\n\r\nusing (var clientContext = new ClientContext(siteUrl))\r\n{\r\n    // you can use it with SharePointOnlineCredentials for O365\r\n    // as well as NetworkCredential for SP2013\r\n    // context.Credentials = new NetworkCredential(userName, securePassword);\r\n    // context.Credentials = new SharePointOnlineCredentials(userName, securePassword);\r\n\r\n\r\n    // create package manager providing client context and NuGet Gallery to work with\r\n    // for instance, as following:\r\n    // nuget.org - https://packages.nuget.org/api/v2\r\n    // myget.org - https://www.myget.org/F/subpointsolutions-staging/api/v2/package\r\n    var nuGetRepository = PackageRepositoryFactory.Default.CreateRepository(\"https://packages.nuget.org/api/v2\");\r\n    var packageManager = new DefaultMetaPackSolutionPackageManager(nuGetRepository, clientContext);\r\n\r\n    // get your NuGet package by its ID\r\n    var nuGetPackage = nuGetRepository.FindPackage(\"Contoso.Intranet.SiteFields.PnP\");\r\n\r\n    // configure additional options\r\n    // deployment provider such as PnP or SPMeta2 uses these flags to understand:\r\n    // - SharePoint version (SP2013, SP2016, O365\r\n    // - SharePoint API (CSOM, SSOM for SPMeta2 and CSOM for PnP)\r\n    // - SharePoint Edition (Standard / Foundation for SPMeta2)\r\n    var solutionOptions = new List<OptionValue>();\r\n\r\n    solutionOptions.Add(DefaultOptions.SharePoint.Api.CSOM);\r\n    solutionOptions.Add(DefaultOptions.SharePoint.Edition.Standard);\r\n    solutionOptions.Add(DefaultOptions.SharePoint.Version.O365);\r\n\r\n    // target site Url on which youe solution will be deployed\r\n    solutionOptions.Add(new OptionValue\r\n    {\r\n        Name = DefaultOptions.Site.Url.Id,\r\n        Value = siteUrl\r\n    });\r\n\r\n    // provide username/password if needed\r\n    // deployment provider will use these in conjunction with CSOM deployment\r\n    // to connect to O365 or local SharePoint via CSOM\r\n    // if SharePoint version was O365, then SharePointOnlineCredentials will be used\r\n    // if SharePoint version was Sp2013/2016, then NetworkCredential will be used\r\n    // if no username/password is provided, then defaultcreds will be used as if you were on SharePoint box itself\r\n    solutionOptions.Add(new OptionValue\r\n    {\r\n        Name = DefaultOptions.User.Name.Id,\r\n        Value = \"user@contoso.com\"\r\n    });\r\n\r\n    solutionOptions.Add(new OptionValue\r\n    {\r\n        Name = DefaultOptions.User.Password.Id,\r\n        Value = \"pass@word1\"\r\n    });\r\n\r\n    packageManager.SolutionOptions.AddRange(solutionOptions);\r\n\r\n    // install package\r\n    // metapack will resolve and install all the things for you\r\n    packageManager.InstallPackage(nuGetPackage, false, false);\r\n}\r\n\r\n","Language":"cs","Namespace":"SubPointSolutions.Docs.Views.MetaPack","ClassName":"Index","MethodName":"Install_Package","ClassComment":"","MethodFullName":"SubPointSolutions.Docs.Views.MetaPack.Index.Install_Package","ClassFullName":"SubPointSolutions.Docs.Views.MetaPack.Index","MethodParametersCount":0,"SourceFileName":"index.cs","SourceFileNameWithoutExtension":"index"}