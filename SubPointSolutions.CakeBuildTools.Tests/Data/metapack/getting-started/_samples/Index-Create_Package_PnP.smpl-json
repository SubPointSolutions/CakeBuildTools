{"IsMethod":true,"IsClass":false,"Tags":[],"Scope":null,"Title":null,"Description":null,"MethodBodyWithFunction":"\r\n        \r\n        public void Create_Package_PnP()\r\n        {\r\n            // A high level abstraction for solution package.\r\n            // Follows NuGet spec design - https://docs.nuget.org/ndocs/schema/nuspec\r\n            // Solution package is a container for SERIALIZED models.\r\n            // It means that solution package does not depend on a particular API oe assembly so that  models have to be in serialazable, platform and api independent way.\r\n\r\n            var solutionPackage = new SolutionPackageBase();\r\n\r\n            solutionPackage.Name = \"Contoso Intranet PnP - Site Fields\";\r\n            solutionPackage.Title = \"Contoso Intranet PnP - Site Fields\";\r\n\r\n            solutionPackage.Description = \"Contains site level fields for Contoso intranet\";\r\n            solutionPackage.Id = \"Contoso.Intranet.SiteFields.PnP\";\r\n            solutionPackage.Authors = \"SubPoint Solutions\";\r\n            solutionPackage.Company = \"SubPoint Solutions\";\r\n            solutionPackage.Version = \"1.0.0.0\";\r\n            solutionPackage.Owners = \"SubPoint Solutions\";\r\n\r\n            solutionPackage.ReleaseNotes = \"Initial set of the site fields for Contoso Intranet\";\r\n            solutionPackage.Summary = \"All site fields required for Contoso intranet\";\r\n            solutionPackage.ProjectUrl = \"https://github.com/SubPointSolutions/DefinitelyPacked\";\r\n            solutionPackage.IconUrl = \"https://github.com/SubPointSolutions/metapack/metapack.png\";\r\n            solutionPackage.LicenseUrl = \"https://opensource.org/licenses/MIT\";\r\n\r\n            solutionPackage.Copyright = \"All yours\";\r\n            solutionPackage.Tags = \"MetaPack SPMeta2 SiteFields Taxonomy\";\r\n\r\n            // create a new ModelContainerBase for every SharePointPnP solution\r\n            // * currently only OpenXML PnP packages as supported\r\n            // then add to solution package\r\n            // you can put \"Order\" option to control deployment order of the models\r\n\r\n            // all your SharePointPnP OpenXML packages\r\n            var allPnPOpenXmlFiles = new List<string>();\r\n\r\n            for (var index = 0; index < allPnPOpenXmlFiles.Count; index++)\r\n            {\r\n                var pnpPackageFilePath = allPnPOpenXmlFiles[index];\r\n                var pnpPackageBytes = System.IO.File.ReadAllBytes(pnpPackageFilePath);\r\n\r\n                var modelContainer = new ModelContainerBase\r\n                {\r\n                    Model = pnpPackageBytes\r\n                };\r\n\r\n                // add sort order to control deployment order of the models\r\n                modelContainer.AdditionalOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.Model.Order.Id,\r\n                    Value = index.ToString()\r\n                });\r\n\r\n                // add type of the SharePointPnP package\r\n                // current only OpenXml is supoported\r\n                modelContainer.AdditionalOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.Model.Type.Id,\r\n                    Value = \"SharePointPnP.OpenXml\"\r\n                });\r\n\r\n                // add model container to solution\r\n                solutionPackage.AddModel(modelContainer);\r\n            }\r\n\r\n            // flag a provider which will be used for solution package deployment\r\n            solutionPackage.AdditionalOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.SolutionToolPackage.PackageId.Id,\r\n                Value = \"MetaPack.SharePointPnP\"\r\n            });\r\n\r\n            var solutionPackageService = new SharePointPnPSolutionPackageService();\r\n\r\n            // save your NuGet solution package as stream\r\n            var nuGetPackageStream = solutionPackageService.Pack(solutionPackage, null);\r\n\r\n            // or save it straight to file, for instance, on shared folder\r\n            solutionPackageService.PackToFile(solutionPackage, \"Contoso.Intranet.SiteFields.PnP.nupkg\");\r\n\r\n            // or push it straight to NuGet gallery you've got - http://NuGet.org or http://MyGet.org\r\n            // follow instructions on how obtain Url/Key for a specific NuGet Gallery\r\n            var nuGetGallery_ApiUrl = \"\";\r\n            var nuGetGallery_ApiKey = \"\";\r\n\r\n            solutionPackageService.Push(solutionPackage, nuGetGallery_ApiUrl, nuGetGallery_ApiKey);\r\n        }","MethodBody":"// A high level abstraction for solution package.\r\n// Follows NuGet spec design - https://docs.nuget.org/ndocs/schema/nuspec\r\n// Solution package is a container for SERIALIZED models.\r\n// It means that solution package does not depend on a particular API oe assembly so that  models have to be in serialazable, platform and api independent way.\r\n\r\nvar solutionPackage = new SolutionPackageBase();\r\n\r\nsolutionPackage.Name = \"Contoso Intranet PnP - Site Fields\";\r\nsolutionPackage.Title = \"Contoso Intranet PnP - Site Fields\";\r\n\r\nsolutionPackage.Description = \"Contains site level fields for Contoso intranet\";\r\nsolutionPackage.Id = \"Contoso.Intranet.SiteFields.PnP\";\r\nsolutionPackage.Authors = \"SubPoint Solutions\";\r\nsolutionPackage.Company = \"SubPoint Solutions\";\r\nsolutionPackage.Version = \"1.0.0.0\";\r\nsolutionPackage.Owners = \"SubPoint Solutions\";\r\n\r\nsolutionPackage.ReleaseNotes = \"Initial set of the site fields for Contoso Intranet\";\r\nsolutionPackage.Summary = \"All site fields required for Contoso intranet\";\r\nsolutionPackage.ProjectUrl = \"https://github.com/SubPointSolutions/DefinitelyPacked\";\r\nsolutionPackage.IconUrl = \"https://github.com/SubPointSolutions/metapack/metapack.png\";\r\nsolutionPackage.LicenseUrl = \"https://opensource.org/licenses/MIT\";\r\n\r\nsolutionPackage.Copyright = \"All yours\";\r\nsolutionPackage.Tags = \"MetaPack SPMeta2 SiteFields Taxonomy\";\r\n\r\n// create a new ModelContainerBase for every SharePointPnP solution\r\n// * currently only OpenXML PnP packages as supported\r\n// then add to solution package\r\n// you can put \"Order\" option to control deployment order of the models\r\n\r\n// all your SharePointPnP OpenXML packages\r\nvar allPnPOpenXmlFiles = new List<string>();\r\n\r\nfor (var index = 0; index < allPnPOpenXmlFiles.Count; index++)\r\n{\r\n    var pnpPackageFilePath = allPnPOpenXmlFiles[index];\r\n    var pnpPackageBytes = System.IO.File.ReadAllBytes(pnpPackageFilePath);\r\n\r\n    var modelContainer = new ModelContainerBase\r\n    {\r\n        Model = pnpPackageBytes\r\n    };\r\n\r\n    // add sort order to control deployment order of the models\r\n    modelContainer.AdditionalOptions.Add(new OptionValue\r\n    {\r\n        Name = DefaultOptions.Model.Order.Id,\r\n        Value = index.ToString()\r\n    });\r\n\r\n    // add type of the SharePointPnP package\r\n    // current only OpenXml is supoported\r\n    modelContainer.AdditionalOptions.Add(new OptionValue\r\n    {\r\n        Name = DefaultOptions.Model.Type.Id,\r\n        Value = \"SharePointPnP.OpenXml\"\r\n    });\r\n\r\n    // add model container to solution\r\n    solutionPackage.AddModel(modelContainer);\r\n}\r\n\r\n// flag a provider which will be used for solution package deployment\r\nsolutionPackage.AdditionalOptions.Add(new OptionValue\r\n{\r\n    Name = DefaultOptions.SolutionToolPackage.PackageId.Id,\r\n    Value = \"MetaPack.SharePointPnP\"\r\n});\r\n\r\nvar solutionPackageService = new SharePointPnPSolutionPackageService();\r\n\r\n// save your NuGet solution package as stream\r\nvar nuGetPackageStream = solutionPackageService.Pack(solutionPackage, null);\r\n\r\n// or save it straight to file, for instance, on shared folder\r\nsolutionPackageService.PackToFile(solutionPackage, \"Contoso.Intranet.SiteFields.PnP.nupkg\");\r\n\r\n// or push it straight to NuGet gallery you've got - http://NuGet.org or http://MyGet.org\r\n// follow instructions on how obtain Url/Key for a specific NuGet Gallery\r\nvar nuGetGallery_ApiUrl = \"\";\r\nvar nuGetGallery_ApiKey = \"\";\r\n\r\nsolutionPackageService.Push(solutionPackage, nuGetGallery_ApiUrl, nuGetGallery_ApiKey);\r\n\r\n","Language":"cs","Namespace":"SubPointSolutions.Docs.Views.MetaPack","ClassName":"Index","MethodName":"Create_Package_PnP","ClassComment":"","MethodFullName":"SubPointSolutions.Docs.Views.MetaPack.Index.Create_Package_PnP","ClassFullName":"SubPointSolutions.Docs.Views.MetaPack.Index","MethodParametersCount":0,"SourceFileName":"index.cs","SourceFileNameWithoutExtension":"index"}