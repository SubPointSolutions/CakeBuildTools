{"IsMethod":false,"IsClass":true,"Tags":[],"Scope":null,"Title":"","Description":"","MethodBodyWithFunction":"    \r\n    public class Index\r\n    {\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.Basics\")]\r\n        public void Create_Package_SPMeta2()\r\n        {\r\n            // Follows NuGet spec design - https://docs.nuget.org/ndocs/schema/nuspec\r\n            // Solution package is a container for SERIALIZED models.\r\n            var solutionPackage = new SolutionPackageBase();\r\n\r\n            solutionPackage.Name = \"Contoso Intranet SPMeta2 - Site Fields\";\r\n            solutionPackage.Title = \"Contoso Intranet SPMeta2 - Site Fields\";\r\n\r\n            solutionPackage.Description = \"Contains site level fields for Contoso intranet\";\r\n            solutionPackage.Id = \"Contoso.Intranet.SiteFields.SPMeta2\";\r\n            solutionPackage.Authors = \"SubPoint Solutions\";\r\n            solutionPackage.Company = \"SubPoint Solutions\";\r\n            solutionPackage.Version = \"1.0.0.0\";\r\n            solutionPackage.Owners = \"SubPoint Solutions\";\r\n\r\n            solutionPackage.ReleaseNotes = \"Initial set of the site fields for Contoso Intranet\";\r\n            solutionPackage.Summary = \"All site fields required for Contoso intranet\";\r\n            solutionPackage.ProjectUrl = \"https://github.com/SubPointSolutions/DefinitelyPacked\";\r\n            solutionPackage.IconUrl = \"https://github.com/SubPointSolutions/metapack/metapack.png\";\r\n            solutionPackage.LicenseUrl = \"https://opensource.org/licenses/MIT\";\r\n\r\n            solutionPackage.Copyright = \"All yours\";\r\n            solutionPackage.Tags = \"MetaPack SPMeta2 SiteFields Taxonomy\";\r\n\r\n            // here are all your SPMeta2 models\r\n            var models = new List<ModelNode>();\r\n\r\n            // create a new ModelContainerBase for every model\r\n            // and then add to solution package\r\n            // you can put \"Order\" option to control deployment order of the models\r\n\r\n            for (var index = 0; index < models.Count; index++)\r\n            {\r\n                var model = models[index];\r\n                var xmlContext = SPMeta2Model.ToXML(model);\r\n\r\n                // create ModelContainerBase, put serialized model there\r\n                var modelContainer = new ModelContainerBase\r\n                {\r\n                    Model = Encoding.UTF8.GetBytes(xmlContext),\r\n                };\r\n\r\n                // add sort order to control deployment order of the models\r\n                modelContainer.AdditionalOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.Model.Order.Id,\r\n                    Value = index.ToString()\r\n                });\r\n\r\n                // add model container to solution\r\n                solutionPackage.AddModel(modelContainer);\r\n            }\r\n\r\n            // flag a provider which will be used for solution package deployment\r\n            solutionPackage.AdditionalOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.SolutionToolPackage.PackageId.Id,\r\n                Value = \"MetaPack.SPMeta2\"\r\n            });\r\n\r\n            var solutionPackageService = new SPMeta2SolutionPackageService();\r\n\r\n            // save your NuGet solution package as stream\r\n            var nuGetPackageStream = solutionPackageService.Pack(solutionPackage, null);\r\n\r\n            // or save it straight to file, for instance, on shared folder\r\n            solutionPackageService.PackToFile(solutionPackage, \"Contoso.Intranet.SiteFields.SPMeta2.nupkg\");\r\n\r\n            // or push it straight to NuGet gallery you've got - http://NuGet.org or http://MyGet.org\r\n            // follow instructions on how obtain Url/Key for a specific NuGet Gallery\r\n            var nuGetGallery_ApiUrl = \"\";\r\n            var nuGetGallery_ApiKey = \"\";\r\n\r\n            solutionPackageService.Push(solutionPackage, nuGetGallery_ApiUrl, nuGetGallery_ApiKey);\r\n        }\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.Basics\")]\r\n        public void Create_Package_PnP()\r\n        {\r\n            // A high level abstraction for solution package.\r\n            // Follows NuGet spec design - https://docs.nuget.org/ndocs/schema/nuspec\r\n            // Solution package is a container for SERIALIZED models.\r\n            // It means that solution package does not depend on a particular API oe assembly so that  models have to be in serialazable, platform and api independent way.\r\n\r\n            var solutionPackage = new SolutionPackageBase();\r\n\r\n            solutionPackage.Name = \"Contoso Intranet PnP - Site Fields\";\r\n            solutionPackage.Title = \"Contoso Intranet PnP - Site Fields\";\r\n\r\n            solutionPackage.Description = \"Contains site level fields for Contoso intranet\";\r\n            solutionPackage.Id = \"Contoso.Intranet.SiteFields.PnP\";\r\n            solutionPackage.Authors = \"SubPoint Solutions\";\r\n            solutionPackage.Company = \"SubPoint Solutions\";\r\n            solutionPackage.Version = \"1.0.0.0\";\r\n            solutionPackage.Owners = \"SubPoint Solutions\";\r\n\r\n            solutionPackage.ReleaseNotes = \"Initial set of the site fields for Contoso Intranet\";\r\n            solutionPackage.Summary = \"All site fields required for Contoso intranet\";\r\n            solutionPackage.ProjectUrl = \"https://github.com/SubPointSolutions/DefinitelyPacked\";\r\n            solutionPackage.IconUrl = \"https://github.com/SubPointSolutions/metapack/metapack.png\";\r\n            solutionPackage.LicenseUrl = \"https://opensource.org/licenses/MIT\";\r\n\r\n            solutionPackage.Copyright = \"All yours\";\r\n            solutionPackage.Tags = \"MetaPack SPMeta2 SiteFields Taxonomy\";\r\n\r\n            // create a new ModelContainerBase for every SharePointPnP solution\r\n            // * currently only OpenXML PnP packages as supported\r\n            // then add to solution package\r\n            // you can put \"Order\" option to control deployment order of the models\r\n\r\n            // all your SharePointPnP OpenXML packages\r\n            var allPnPOpenXmlFiles = new List<string>();\r\n\r\n            for (var index = 0; index < allPnPOpenXmlFiles.Count; index++)\r\n            {\r\n                var pnpPackageFilePath = allPnPOpenXmlFiles[index];\r\n                var pnpPackageBytes = System.IO.File.ReadAllBytes(pnpPackageFilePath);\r\n\r\n                var modelContainer = new ModelContainerBase\r\n                {\r\n                    Model = pnpPackageBytes\r\n                };\r\n\r\n                // add sort order to control deployment order of the models\r\n                modelContainer.AdditionalOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.Model.Order.Id,\r\n                    Value = index.ToString()\r\n                });\r\n\r\n                // add type of the SharePointPnP package\r\n                // current only OpenXml is supoported\r\n                modelContainer.AdditionalOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.Model.Type.Id,\r\n                    Value = \"SharePointPnP.OpenXml\"\r\n                });\r\n\r\n                // add model container to solution\r\n                solutionPackage.AddModel(modelContainer);\r\n            }\r\n\r\n            // flag a provider which will be used for solution package deployment\r\n            solutionPackage.AdditionalOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.SolutionToolPackage.PackageId.Id,\r\n                Value = \"MetaPack.SharePointPnP\"\r\n            });\r\n\r\n            var solutionPackageService = new SharePointPnPSolutionPackageService();\r\n\r\n            // save your NuGet solution package as stream\r\n            var nuGetPackageStream = solutionPackageService.Pack(solutionPackage, null);\r\n\r\n            // or save it straight to file, for instance, on shared folder\r\n            solutionPackageService.PackToFile(solutionPackage, \"Contoso.Intranet.SiteFields.PnP.nupkg\");\r\n\r\n            // or push it straight to NuGet gallery you've got - http://NuGet.org or http://MyGet.org\r\n            // follow instructions on how obtain Url/Key for a specific NuGet Gallery\r\n            var nuGetGallery_ApiUrl = \"\";\r\n            var nuGetGallery_ApiKey = \"\";\r\n\r\n            solutionPackageService.Push(solutionPackage, nuGetGallery_ApiUrl, nuGetGallery_ApiKey);\r\n        }\r\n\r\n        [TestMethod]\r\n        [TestCategory(\"Docs.Basics\")]\r\n        public void Install_Package()\r\n        {\r\n            // create SharePoint client contex under which MetaPack will be working\r\n\r\n            var siteUrl = \"http://contoso-intranet.local\";\r\n\r\n            using (var clientContext = new ClientContext(siteUrl))\r\n            {\r\n                // you can use it with SharePointOnlineCredentials for O365\r\n                // as well as NetworkCredential for SP2013\r\n                // context.Credentials = new NetworkCredential(userName, securePassword);\r\n                // context.Credentials = new SharePointOnlineCredentials(userName, securePassword);\r\n\r\n\r\n                // create package manager providing client context and NuGet Gallery to work with\r\n                // for instance, as following:\r\n                // nuget.org - https://packages.nuget.org/api/v2\r\n                // myget.org - https://www.myget.org/F/subpointsolutions-staging/api/v2/package\r\n                var nuGetRepository = PackageRepositoryFactory.Default.CreateRepository(\"https://packages.nuget.org/api/v2\");\r\n                var packageManager = new DefaultMetaPackSolutionPackageManager(nuGetRepository, clientContext);\r\n\r\n                // get your NuGet package by its ID \r\n                var nuGetPackage = nuGetRepository.FindPackage(\"Contoso.Intranet.SiteFields.PnP\");\r\n\r\n                // configure additional options\r\n                // deployment provider such as PnP or SPMeta2 uses these flags to understand:\r\n                // - SharePoint version (SP2013, SP2016, O365\r\n                // - SharePoint API (CSOM, SSOM for SPMeta2 and CSOM for PnP)\r\n                // - SharePoint Edition (Standard / Foundation for SPMeta2)\r\n                var solutionOptions = new List<OptionValue>();\r\n\r\n                solutionOptions.Add(DefaultOptions.SharePoint.Api.CSOM);\r\n                solutionOptions.Add(DefaultOptions.SharePoint.Edition.Standard);\r\n                solutionOptions.Add(DefaultOptions.SharePoint.Version.O365);\r\n\r\n                // target site Url on which youe solution will be deployed\r\n                solutionOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.Site.Url.Id,\r\n                    Value = siteUrl\r\n                });\r\n\r\n                // provide username/password if needed\r\n                // deployment provider will use these in conjunction with CSOM deployment\r\n                // to connect to O365 or local SharePoint via CSOM\r\n                // if SharePoint version was O365, then SharePointOnlineCredentials will be used\r\n                // if SharePoint version was Sp2013/2016, then NetworkCredential will be used\r\n                // if no username/password is provided, then defaultcreds will be used as if you were on SharePoint box itself\r\n                solutionOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.User.Name.Id,\r\n                    Value = \"user@contoso.com\"\r\n                });\r\n\r\n                solutionOptions.Add(new OptionValue\r\n                {\r\n                    Name = DefaultOptions.User.Password.Id,\r\n                    Value = \"pass@word1\"\r\n                });\r\n\r\n                packageManager.SolutionOptions.AddRange(solutionOptions);\r\n\r\n                // install package\r\n                // metapack will resolve and install all the things for you\r\n                packageManager.InstallPackage(nuGetPackage, false, false);\r\n            }\r\n        }\r\n    }","MethodBody":"public class Index\r\n{\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.Basics\")]\r\n    public void Create_Package_SPMeta2()\r\n    {\r\n        // Follows NuGet spec design - https://docs.nuget.org/ndocs/schema/nuspec\r\n        // Solution package is a container for SERIALIZED models.\r\n        var solutionPackage = new SolutionPackageBase();\r\n\r\n        solutionPackage.Name = \"Contoso Intranet SPMeta2 - Site Fields\";\r\n        solutionPackage.Title = \"Contoso Intranet SPMeta2 - Site Fields\";\r\n\r\n        solutionPackage.Description = \"Contains site level fields for Contoso intranet\";\r\n        solutionPackage.Id = \"Contoso.Intranet.SiteFields.SPMeta2\";\r\n        solutionPackage.Authors = \"SubPoint Solutions\";\r\n        solutionPackage.Company = \"SubPoint Solutions\";\r\n        solutionPackage.Version = \"1.0.0.0\";\r\n        solutionPackage.Owners = \"SubPoint Solutions\";\r\n\r\n        solutionPackage.ReleaseNotes = \"Initial set of the site fields for Contoso Intranet\";\r\n        solutionPackage.Summary = \"All site fields required for Contoso intranet\";\r\n        solutionPackage.ProjectUrl = \"https://github.com/SubPointSolutions/DefinitelyPacked\";\r\n        solutionPackage.IconUrl = \"https://github.com/SubPointSolutions/metapack/metapack.png\";\r\n        solutionPackage.LicenseUrl = \"https://opensource.org/licenses/MIT\";\r\n\r\n        solutionPackage.Copyright = \"All yours\";\r\n        solutionPackage.Tags = \"MetaPack SPMeta2 SiteFields Taxonomy\";\r\n\r\n        // here are all your SPMeta2 models\r\n        var models = new List<ModelNode>();\r\n\r\n        // create a new ModelContainerBase for every model\r\n        // and then add to solution package\r\n        // you can put \"Order\" option to control deployment order of the models\r\n\r\n        for (var index = 0; index < models.Count; index++)\r\n        {\r\n            var model = models[index];\r\n            var xmlContext = SPMeta2Model.ToXML(model);\r\n\r\n            // create ModelContainerBase, put serialized model there\r\n            var modelContainer = new ModelContainerBase\r\n            {\r\n                Model = Encoding.UTF8.GetBytes(xmlContext),\r\n            };\r\n\r\n            // add sort order to control deployment order of the models\r\n            modelContainer.AdditionalOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.Model.Order.Id,\r\n                Value = index.ToString()\r\n            });\r\n\r\n            // add model container to solution\r\n            solutionPackage.AddModel(modelContainer);\r\n        }\r\n\r\n        // flag a provider which will be used for solution package deployment\r\n        solutionPackage.AdditionalOptions.Add(new OptionValue\r\n        {\r\n            Name = DefaultOptions.SolutionToolPackage.PackageId.Id,\r\n            Value = \"MetaPack.SPMeta2\"\r\n        });\r\n\r\n        var solutionPackageService = new SPMeta2SolutionPackageService();\r\n\r\n        // save your NuGet solution package as stream\r\n        var nuGetPackageStream = solutionPackageService.Pack(solutionPackage, null);\r\n\r\n        // or save it straight to file, for instance, on shared folder\r\n        solutionPackageService.PackToFile(solutionPackage, \"Contoso.Intranet.SiteFields.SPMeta2.nupkg\");\r\n\r\n        // or push it straight to NuGet gallery you've got - http://NuGet.org or http://MyGet.org\r\n        // follow instructions on how obtain Url/Key for a specific NuGet Gallery\r\n        var nuGetGallery_ApiUrl = \"\";\r\n        var nuGetGallery_ApiKey = \"\";\r\n\r\n        solutionPackageService.Push(solutionPackage, nuGetGallery_ApiUrl, nuGetGallery_ApiKey);\r\n    }\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.Basics\")]\r\n    public void Create_Package_PnP()\r\n    {\r\n        // A high level abstraction for solution package.\r\n        // Follows NuGet spec design - https://docs.nuget.org/ndocs/schema/nuspec\r\n        // Solution package is a container for SERIALIZED models.\r\n        // It means that solution package does not depend on a particular API oe assembly so that  models have to be in serialazable, platform and api independent way.\r\n\r\n        var solutionPackage = new SolutionPackageBase();\r\n\r\n        solutionPackage.Name = \"Contoso Intranet PnP - Site Fields\";\r\n        solutionPackage.Title = \"Contoso Intranet PnP - Site Fields\";\r\n\r\n        solutionPackage.Description = \"Contains site level fields for Contoso intranet\";\r\n        solutionPackage.Id = \"Contoso.Intranet.SiteFields.PnP\";\r\n        solutionPackage.Authors = \"SubPoint Solutions\";\r\n        solutionPackage.Company = \"SubPoint Solutions\";\r\n        solutionPackage.Version = \"1.0.0.0\";\r\n        solutionPackage.Owners = \"SubPoint Solutions\";\r\n\r\n        solutionPackage.ReleaseNotes = \"Initial set of the site fields for Contoso Intranet\";\r\n        solutionPackage.Summary = \"All site fields required for Contoso intranet\";\r\n        solutionPackage.ProjectUrl = \"https://github.com/SubPointSolutions/DefinitelyPacked\";\r\n        solutionPackage.IconUrl = \"https://github.com/SubPointSolutions/metapack/metapack.png\";\r\n        solutionPackage.LicenseUrl = \"https://opensource.org/licenses/MIT\";\r\n\r\n        solutionPackage.Copyright = \"All yours\";\r\n        solutionPackage.Tags = \"MetaPack SPMeta2 SiteFields Taxonomy\";\r\n\r\n        // create a new ModelContainerBase for every SharePointPnP solution\r\n        // * currently only OpenXML PnP packages as supported\r\n        // then add to solution package\r\n        // you can put \"Order\" option to control deployment order of the models\r\n\r\n        // all your SharePointPnP OpenXML packages\r\n        var allPnPOpenXmlFiles = new List<string>();\r\n\r\n        for (var index = 0; index < allPnPOpenXmlFiles.Count; index++)\r\n        {\r\n            var pnpPackageFilePath = allPnPOpenXmlFiles[index];\r\n            var pnpPackageBytes = System.IO.File.ReadAllBytes(pnpPackageFilePath);\r\n\r\n            var modelContainer = new ModelContainerBase\r\n            {\r\n                Model = pnpPackageBytes\r\n            };\r\n\r\n            // add sort order to control deployment order of the models\r\n            modelContainer.AdditionalOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.Model.Order.Id,\r\n                Value = index.ToString()\r\n            });\r\n\r\n            // add type of the SharePointPnP package\r\n            // current only OpenXml is supoported\r\n            modelContainer.AdditionalOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.Model.Type.Id,\r\n                Value = \"SharePointPnP.OpenXml\"\r\n            });\r\n\r\n            // add model container to solution\r\n            solutionPackage.AddModel(modelContainer);\r\n        }\r\n\r\n        // flag a provider which will be used for solution package deployment\r\n        solutionPackage.AdditionalOptions.Add(new OptionValue\r\n        {\r\n            Name = DefaultOptions.SolutionToolPackage.PackageId.Id,\r\n            Value = \"MetaPack.SharePointPnP\"\r\n        });\r\n\r\n        var solutionPackageService = new SharePointPnPSolutionPackageService();\r\n\r\n        // save your NuGet solution package as stream\r\n        var nuGetPackageStream = solutionPackageService.Pack(solutionPackage, null);\r\n\r\n        // or save it straight to file, for instance, on shared folder\r\n        solutionPackageService.PackToFile(solutionPackage, \"Contoso.Intranet.SiteFields.PnP.nupkg\");\r\n\r\n        // or push it straight to NuGet gallery you've got - http://NuGet.org or http://MyGet.org\r\n        // follow instructions on how obtain Url/Key for a specific NuGet Gallery\r\n        var nuGetGallery_ApiUrl = \"\";\r\n        var nuGetGallery_ApiKey = \"\";\r\n\r\n        solutionPackageService.Push(solutionPackage, nuGetGallery_ApiUrl, nuGetGallery_ApiKey);\r\n    }\r\n\r\n    [TestMethod]\r\n    [TestCategory(\"Docs.Basics\")]\r\n    public void Install_Package()\r\n    {\r\n        // create SharePoint client contex under which MetaPack will be working\r\n\r\n        var siteUrl = \"http://contoso-intranet.local\";\r\n\r\n        using (var clientContext = new ClientContext(siteUrl))\r\n        {\r\n            // you can use it with SharePointOnlineCredentials for O365\r\n            // as well as NetworkCredential for SP2013\r\n            // context.Credentials = new NetworkCredential(userName, securePassword);\r\n            // context.Credentials = new SharePointOnlineCredentials(userName, securePassword);\r\n\r\n\r\n            // create package manager providing client context and NuGet Gallery to work with\r\n            // for instance, as following:\r\n            // nuget.org - https://packages.nuget.org/api/v2\r\n            // myget.org - https://www.myget.org/F/subpointsolutions-staging/api/v2/package\r\n            var nuGetRepository = PackageRepositoryFactory.Default.CreateRepository(\"https://packages.nuget.org/api/v2\");\r\n            var packageManager = new DefaultMetaPackSolutionPackageManager(nuGetRepository, clientContext);\r\n\r\n            // get your NuGet package by its ID\r\n            var nuGetPackage = nuGetRepository.FindPackage(\"Contoso.Intranet.SiteFields.PnP\");\r\n\r\n            // configure additional options\r\n            // deployment provider such as PnP or SPMeta2 uses these flags to understand:\r\n            // - SharePoint version (SP2013, SP2016, O365\r\n            // - SharePoint API (CSOM, SSOM for SPMeta2 and CSOM for PnP)\r\n            // - SharePoint Edition (Standard / Foundation for SPMeta2)\r\n            var solutionOptions = new List<OptionValue>();\r\n\r\n            solutionOptions.Add(DefaultOptions.SharePoint.Api.CSOM);\r\n            solutionOptions.Add(DefaultOptions.SharePoint.Edition.Standard);\r\n            solutionOptions.Add(DefaultOptions.SharePoint.Version.O365);\r\n\r\n            // target site Url on which youe solution will be deployed\r\n            solutionOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.Site.Url.Id,\r\n                Value = siteUrl\r\n            });\r\n\r\n            // provide username/password if needed\r\n            // deployment provider will use these in conjunction with CSOM deployment\r\n            // to connect to O365 or local SharePoint via CSOM\r\n            // if SharePoint version was O365, then SharePointOnlineCredentials will be used\r\n            // if SharePoint version was Sp2013/2016, then NetworkCredential will be used\r\n            // if no username/password is provided, then defaultcreds will be used as if you were on SharePoint box itself\r\n            solutionOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.User.Name.Id,\r\n                Value = \"user@contoso.com\"\r\n            });\r\n\r\n            solutionOptions.Add(new OptionValue\r\n            {\r\n                Name = DefaultOptions.User.Password.Id,\r\n                Value = \"pass@word1\"\r\n            });\r\n\r\n            packageManager.SolutionOptions.AddRange(solutionOptions);\r\n\r\n            // install package\r\n            // metapack will resolve and install all the things for you\r\n            packageManager.InstallPackage(nuGetPackage, false, false);\r\n        }\r\n    }\r\n}\r\n","Language":"cs","Namespace":"SubPointSolutions.Docs.Views.MetaPack","ClassName":"Index","MethodName":"IndexClass","ClassComment":"","MethodFullName":"ClassIndexClass","ClassFullName":"SubPointSolutions.Docs.Views.MetaPack.Index","MethodParametersCount":0,"SourceFileName":"index.cs","SourceFileNameWithoutExtension":"index"}