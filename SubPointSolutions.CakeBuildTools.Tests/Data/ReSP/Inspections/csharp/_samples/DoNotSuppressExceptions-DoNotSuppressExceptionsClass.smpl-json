{"IsMethod":false,"IsClass":true,"Tags":[],"Scope":null,"Title":"","Description":"","MethodBodyWithFunction":"    \r\n    public class DoNotSuppressExceptions\r\n    {\r\n        [TestMethod]\r\n        public void CallerMethod(ControlCollection controlCollection)\r\n        {\r\n            try\r\n            {\r\n                CalledMethod(\"Test\");\r\n            }\r\n            // DO NOT CATCH USAGE EXCEPTION\r\n            catch (ArgumentNotSpecifiedException ex)\r\n            {\r\n                // special handling for ArgumentNotSpecifiedException\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                // log it\r\n                throw new WrappedException(\"Method XXX call  error occurred\", ex); // wrapped & chained exceptions.\r\n            }\r\n            finally\r\n            {\r\n                // normal clean goes here (like closing open files).\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CalledMethod(string p1)\r\n        {\r\n            // Validate parameter and throw \"usage exception\"\r\n            if (String.IsNullOrEmpty(p1))\r\n                throw new ArgumentNotSpecifiedException(\"Parameter p1 must be specified\");\r\n\r\n            // Here we save data to the storage and the \"system exception\" could be raised\r\n            try\r\n            {\r\n                DAL.Save(p1);\r\n            }\r\n            catch (SqlException e)\r\n            {\r\n                if (e.ErrorCode != NO_ROW_ERROR)\r\n                {\r\n                    // filter out NoDataFound.\r\n                    // do special cleanup, like maybe closing the \"dirty\" database connection.\r\n                    // throw e; <- DO NOT DO IT. This destroys the strack trace information!\r\n                    throw; // this preserves the stack trace\r\n                }\r\n            }\r\n        }\r\n\r\n        public int NO_ROW_ERROR { get; private set; }\r\n    }","MethodBody":"public class DoNotSuppressExceptions\r\n{\r\n    [TestMethod]\r\n    public void CallerMethod(ControlCollection controlCollection)\r\n    {\r\n        try\r\n        {\r\n            CalledMethod(\"Test\");\r\n        }\r\n        // DO NOT CATCH USAGE EXCEPTION\r\n        catch (ArgumentNotSpecifiedException ex)\r\n        {\r\n            // special handling for ArgumentNotSpecifiedException\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            // log it\r\n            throw new WrappedException(\"Method XXX call  error occurred\", ex); // wrapped & chained exceptions.\r\n        }\r\n        finally\r\n        {\r\n            // normal clean goes here (like closing open files).\r\n        }\r\n    }\r\n\r\n    [TestMethod]\r\n    public void CalledMethod(string p1)\r\n    {\r\n        // Validate parameter and throw \"usage exception\"\r\n        if (String.IsNullOrEmpty(p1))\r\n            throw new ArgumentNotSpecifiedException(\"Parameter p1 must be specified\");\r\n\r\n        // Here we save data to the storage and the \"system exception\" could be raised\r\n        try\r\n        {\r\n            DAL.Save(p1);\r\n        }\r\n        catch (SqlException e)\r\n        {\r\n            if (e.ErrorCode != NO_ROW_ERROR)\r\n            {\r\n                // filter out NoDataFound.\r\n                // do special cleanup, like maybe closing the \"dirty\" database connection.\r\n                // throw e; <- DO NOT DO IT. This destroys the strack trace information!\r\n                throw; // this preserves the stack trace\r\n            }\r\n        }\r\n    }\r\n\r\n    public int NO_ROW_ERROR { get; private set; }\r\n}\r\n","Language":"cs","Namespace":"SubPointSolutions.Docs.Views.Views.ReSP.Inspections.csharp","ClassName":"DoNotSuppressExceptions","MethodName":"DoNotSuppressExceptionsClass","ClassComment":"","MethodFullName":"ClassDoNotSuppressExceptionsClass","ClassFullName":"SubPointSolutions.Docs.Views.Views.ReSP.Inspections.csharp.DoNotSuppressExceptions","MethodParametersCount":0,"SourceFileName":"DoNotSuppressExceptions.cs","SourceFileNameWithoutExtension":"DoNotSuppressExceptions"}